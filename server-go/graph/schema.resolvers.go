package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"cycle-graphql-todo/server-go/graph/model"
	"fmt"
	"strconv"
)

// AddTodo is the resolver for the addTodo field.
func (r *mutationResolver) AddTodo(ctx context.Context, text string) (*model.Todo, error) {
	res, err := r.DB.Exec("INSERT INTO todos (text, completed) VALUES (?, ?)", text, false)
	if err != nil {
		return nil, fmt.Errorf("failed to insert todo: %w", err)
	}

	id, err := res.LastInsertId()
	if err != nil {
		return nil, fmt.Errorf("failed to get last insert ID: %w", err)
	}

	newTodo := &model.Todo{
		ID:        strconv.FormatInt(id, 10),
		Text:      text,
		Completed: false,
	}
	return newTodo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, completed bool) (*model.Todo, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid ID format: %w", err)
	}

	_, err = r.DB.Exec("UPDATE todos SET completed = ? WHERE id = ?", completed, intID)
	if err != nil {
		return nil, fmt.Errorf("failed to update todo: %w", err)
	}

	// Retrieve the updated todo to return it
	updatedTodo := &model.Todo{}
	row := r.DB.QueryRow("SELECT id, text, completed FROM todos WHERE id = ?", intID)
	var rowId int
	var rowText string
	var rowCompleted bool

	if err := row.Scan(&rowId, &rowText, &rowCompleted); err != nil {
		// This will return an error if the ID doesn't exist
		return nil, fmt.Errorf("failed to retrieve updated todo: %w", err)
	}
	updatedTodo.ID = strconv.Itoa(rowId)
	updatedTodo.Text = rowText
	updatedTodo.Completed = rowCompleted

	return updatedTodo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (*bool, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid ID format: %w", err)
	}

	res, err := r.DB.Exec("DELETE FROM todos WHERE id = ?", intID)
	if err != nil {
		return nil, fmt.Errorf("failed to delete todo: %w", err)
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return nil, fmt.Errorf("failed to get rows affected: %w", err)
	}

	success := rowsAffected > 0
	return &success, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, term *string) ([]*model.Todo, error) {
	query := "SELECT id, text, completed FROM todos"
	var args []interface{}
	if term != nil && *term != "" {
		query += " WHERE text LIKE ?"
		args = append(args, "%"+*term+"%")
	}

	rows, err := r.DB.Query(query, args...)
	if err != nil {
		return nil, fmt.Errorf("failed to query todos: %w", err)
	}
	defer rows.Close()

	var todos []*model.Todo
	for rows.Next() {
		var todo model.Todo
		var id int
		if err := rows.Scan(&id, &todo.Text, &todo.Completed); err != nil {
			return nil, fmt.Errorf("failed to scan todo row: %w", err)
		}
		todo.ID = strconv.Itoa(id)
		todos = append(todos, &todo)
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }