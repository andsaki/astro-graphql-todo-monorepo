// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (text, completed) VALUES (?, ?) RETURNING id, text, completed
`

type CreateTodoParams struct {
	Text      string `json:"text"`
	Completed bool   `json:"completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.Text, arg.Completed)
	var i Todo
	err := row.Scan(&i.ID, &i.Text, &i.Completed)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const listTodos = `-- name: ListTodos :many
SELECT id, text, completed FROM todos ORDER BY id DESC
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Text, &i.Completed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosByTerm = `-- name: ListTodosByTerm :many
SELECT id, text, completed FROM todos WHERE text LIKE ? ORDER BY id DESC
`

func (q *Queries) ListTodosByTerm(ctx context.Context, text string) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodosByTerm, text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Text, &i.Completed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos SET completed = ? WHERE id = ? RETURNING id, text, completed
`

type UpdateTodoParams struct {
	Completed bool  `json:"completed"`
	ID        int64 `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.Completed, arg.ID)
	var i Todo
	err := row.Scan(&i.ID, &i.Text, &i.Completed)
	return i, err
}
