package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"astro-graphql-todo/server/db"
	"astro-graphql-todo/server/graph/model"
	"context"
	"database/sql"
	"fmt"
	"strconv"
)

// AddTodo は addTodo フィールドのリゾルバです。
func (r *mutationResolver) AddTodo(ctx context.Context, text string) (*model.Todo, error) {
	dbTodo, err := r.Queries.CreateTodo(ctx, db.CreateTodoParams{
		Text:      text,
		Completed: false,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to create todo: %w", err)
	}
	return mapDbTodoToModelTodo(dbTodo), nil
}

// UpdateTodo は updateTodo フィールドのリゾルバです。
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, completed bool) (*model.Todo, error) {
	intID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid ID format: %w", err)
	}

	dbTodo, err := r.Queries.UpdateTodo(ctx, db.UpdateTodoParams{
		ID:        intID,
		Completed: completed,
	})
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, fmt.Errorf("todo with id %s not found", id)
		}
		return nil, fmt.Errorf("failed to update todo: %w", err)
	}
	return mapDbTodoToModelTodo(dbTodo), nil
}

// DeleteTodo は deleteTodo フィールドのリゾルバです。
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (*bool, error) {
	intID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid ID format: %w", err)
	}

	err = r.Queries.DeleteTodo(ctx, intID)
	if err != nil {
		if err == sql.ErrNoRows {
			success := false
			return &success, nil // No row found to delete, so return false
		}
		return nil, fmt.Errorf("failed to delete todo: %w", err)
	}

	success := true // Deletion was successful
	return &success, nil
}

// Todos は todos フィールドのリゾルバです。
func (r *queryResolver) Todos(ctx context.Context, term *string, sort *model.SortOrder) ([]*model.Todo, error) {
	var dbTodos []db.Todo
	var err error

	// デフォルトのソート順を降順に設定
	sortOrder := model.SortOrderDesc
	if sort != nil {
		sortOrder = *sort
	}

	if term != nil && *term != "" {
		searchTerm := "%" + *term + "%"
		if sortOrder == model.SortOrderAsc {
			dbTodos, err = r.Queries.ListTodosByTermAsc(ctx, searchTerm)
		} else {
			dbTodos, err = r.Queries.ListTodosByTerm(ctx, searchTerm)
		}
	} else {
		if sortOrder == model.SortOrderAsc {
			dbTodos, err = r.Queries.ListTodosAsc(ctx)
		} else {
			dbTodos, err = r.Queries.ListTodos(ctx)
		}
	}

	if err != nil {
		return nil, fmt.Errorf("failed to query todos: %w", err)
	}

	var todos []*model.Todo
	for _, dbTodo := range dbTodos {
		todos = append(todos, mapDbTodoToModelTodo(dbTodo))
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
